apply plugin: 'com.android.application'

def javaVersion = JavaVersion.VERSION_1_7
def bakPath = file("${buildDir}/bakApk/") //指定基准文件存放位置

android {
    signingConfigs {
        release {
            try {
            keyAlias 'TinkerTest'
            keyPassword '15728006854'
            storeFile file('TinkerTest.jks')
            storePassword '15728006854'
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
    }
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.tinker_demotest"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        /**
         * you can use multiDex and install it in your ApplicationLifeCycle implement
         */
        multiDexEnabled true
    }
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    //recommend
    dexOptions {
        jumboMode = true
    }
    buildTypes {
        //编译release 发布时的配置环境
        release {
            //开启混淆
            minifyEnabled true
            //配置签名
            signingConfig signingConfigs.release
            //混淆文件配置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    //生成appilcation时使用
    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    //tinker的核心sdk库
    compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    compile 'com.android.support:multidex:1.0.1'

    //以下SDK开发者请根据需要自行选择
    //bmob-sdk：Bmob的android sdk包，包含了Bmob的数据存储、文件等服务，以下是最新的bmob-sdk:
    //3.5.5：请务必查看下面注释[1]
    compile 'cn.bmob.android:bmob-sdk:3.5.5'
    //如果你想应用能够兼容Android6.0，请添加此依赖(org.apache.http.legacy.jar)
    compile 'cn.bmob.android:http-legacy:1.0'
    compile 'com.android.support:support-v4:25.3.1'
}


ext{
    tinkerEnable = true;
    tinkerOldApkPath = "${bakPath}/app-release-0922-13-37-01.apk"
    tinkerID = "1.0"
    tinkerApplyMappingPath = "${bakPath}/app-release-0922-13-37-01-mapping.txt"
    tinkerApplyResourcePath = "${bakPath}/app-release-0922-13-37-01-R.txt"
}
def buildWithTinker(){
    return ext.tinkerEnable
}

def getOldApkPath(){
    return ext.tinkerOldApkPath
}

def getApplyMappingPath(){
    return ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath(){
    return ext.tinkerApplyResourcePath
}

def getTinkerIdValue(){
    return ext.tinkerID
}


if (buildWithTinker()){
    //启用tinker
    apply plugin: 'com.tencent.tinker.patch'

    //所有tinker相关的参数配置
    tinkerPatch{
        oldApk = getOldApkPath() //指定old akp文件路径
        ignoreWarning = false //不忽略tinker的警告，有则终止patch文件的生成
        useSign = true //强制patch文件也使用签名
        tinkerEnable = buildWithTinker(); //指定是否启用tinker

        buildConfig{
            applyMapping = getApplyMappingPath()  //指定old apk 打包时使用的混淆文件

            applyResourceMapping = getApplyResourceMappingPath() //指定old apk的资源文件

            tinkerId = getTinkerIdValue() //指定TinkerID

            keepDexApply = false
        }

        dex{
            dexMode = "jar"  //jar,raw
            pattern = ["classes*.dex", "assets/secondary-dex-?.jar"] //指定dex文件目录
            loader = ["com.tinker_demotest.tinker.MyTinkerApplication"] //指定加载patch文件时用到的类
        }

        lib{
            pattern = ["lib/*/*.so"]
        }

        res{
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]	//指定tinker可以修改的资源路径
            ignoreChange = ["assets/sample_meta.txt"]//指定不受影响的路径
            largeModSize = 100	//资源修改大小的默认值
        }

        //主要用于说明版本更新的主要信息
        packageConfig{
            configField("patchMessage","fix the 1.0 version's bugs")

            configField("patchVersion","1.0")

        }
    }


    /**
     * 这几句话的意思是：判断是否使用了多渠道，如果大于0，则为true,反之为false
     *flavors 多渠道
     */

    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each {flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    def date = new Date().format("MMdd-HH-mm-ss")

    /**
     * bak apk and mapping
     * 复制基准包和其他必须文件到指定目录
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name


        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }


}